<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XSockets.Plugin.Framework</name>
    </assembly>
    <members>
        <member name="T:XSockets.Plugin.Framework.Composable">
            <summary>
            Handles the composition of exports and imports
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.RegisterExport``1">
            <summary>
                Lets you register additional Exports into the plugin framework.
                This method have to be called prior to any usage of the plugin framework.
                After registration you will not be forced to have an export attribute on your plugin.
                You can get an instance by using the Composable.GetExport(s) method(s)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.LoadAssembly(System.String)">
            <summary>
            Loads additional assemblies. Will be used for scenarios of runtime re-composition
            </summary>
            <param name="assemblyPath"></param>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.GetExports``1">
            <summary>
            Will retrieve all exports found that implements the interface T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.GetExport``1">
            <summary>
            Will return a single instance the implements the interface T.
            If more than one instance is found an exception will be thrown
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.Compose``1(``0)">
            <summary>
            If not using GetExport or GetExports you can use Compose to satisfy all imports of an object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="P:XSockets.Plugin.Framework.Composable.ExportableInterfaces">
            <summary>
                Interfaces that you want the plugin framework to know about. You wont need the export attribute for these types.
                Everything implementing these will become a plugin.
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Composable.ExportedTypes">
            <summary>
            All found exports
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Composable.LoadedAssemblies">
            <summary>
            The assemblies loaded by the plugin framework
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Composable.PluginCatalog">
            <summary>
            If a plugin catalog is used this is the one...
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.Helpers.PluginHelpers">
            <summary>
            Plugin framework helpers...
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Helpers.PluginHelpers.ComposeMe``1(``0)">
            <summary>
            Will compose all imports of T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
        </member>
        <member name="M:XSockets.Plugin.Framework.Helpers.PluginHelpers.GetAttributeOfType``1(System.Reflection.PropertyInfo)">
            <summary>
            Extracts the first attribute of type T from a Propertyinfo object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pp"></param>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Helpers.PluginHelpers.GetPropertiesWithAttributeOfType``1(System.Type)">
            <summary>
            Return the propertirs that implements a certain attribute on a type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Helpers.PluginHelpers.GetPropertiesWithAttributeOfType``2(System.Type)">
            <summary>
            Return the propertirs that implements a either attribute T or TA on a type
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TA"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Helpers.PluginHelpers.IsExport(System.Type)">
            <summary>
            Checks if a type has the export attribute set
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
    </members>
</doc>
