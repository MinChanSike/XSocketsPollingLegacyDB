if ("WebSocket" in window === false) { window.WebSocket = function (e, t) { function r(e, t) { if (typeof e !== undefined && e !== "") { var n = e.split("&"); for (var r = 0; r < n.length; r++) { if (n[r].indexOf(t) > -1) { return n[r].split("=")[1] } } } return "" } $(window).bind("beforeunload", function () { n.close() }); var n = this; this.client = { guid: null }; this.handler = e; this.MessageEvent = function (e) { return { type: "message", data: JSON.stringify(e) } }; this.payload = function (e) { return { handler: n.handler, client: n.client.guid, Json: e } }; this.listener = function () { return { handler: n.handler, client: n.client.guid } }; this.readystate = 0; n.client.guid = r(e, "XSocketsClientStorageGuid"); console.log(n); this.ajax("/Fallback/Init", "GET", { handler: n.handler, client: n.client.guid }, true, function (e) { n.client.guid = JSON.parse(e.data).ClientGuid; n.readyState = 1; n.onmessage(new n.MessageEvent(e)); n.listen() }); return this }; window.WebSocket.prototype.close = function () { this.ajax("/Fallback/Close", "GET", { client: self.client.guid }, true, function () { }) }; window.WebSocket.prototype.readyState = 0; window.WebSocket.prototype.send = function (e) { var t = JSON.parse(e); if (t.event == "xsockets.xnode.open") return; if (t.event == "xsockets.unsubscribe") { this.ajax("/Fallback/Unind", "GET", { client: this.client.guid, event: JSON.parse(t.data).Event }, true, function () { }) } else if (t.event == "xsockets.subscribe") { this.ajax("/Fallback/Bind", "GET", { client: this.client.guid, event: JSON.parse(t.data).Event }, false, function () { }) } else { this.ajax("/Fallback/Trigger", "POST", this.payload(e), false, function () { }) } }; window.WebSocket.prototype.close = function () { $.getJSON("/Fallback/Close", { client: this.client.guid }).done(function () { sessionStorage.clear() }) }; window.WebSocket.prototype.ajax = function (e, t, n, r, i) { var s = { processData: true, dataType: "json", type: t, url: e, async: r, cache: false, success: i, data: n }; $.ajax(s) }; window.WebSocket.prototype.onmessage = function (e) { }; window.WebSocket.prototype.onerror = function (e) { }; window.WebSocket.prototype.listen = function () { var e = this; this.ajax("/Fallback/Listen", "POST", this.listener(), true, function (t) { $.each(t, function (t, n) { e.onmessage(e.MessageEvent(n)) }); e.listen() }) } }